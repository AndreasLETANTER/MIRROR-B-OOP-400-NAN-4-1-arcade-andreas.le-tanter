name: chocolatine
env:
  MIRROR_URL: git@github.com:EpitechPromo2026/B-OOP-400-NAN-4-1-arcade-andreas.le-tanter.git
  EXECUTABLE: "arcade"
  UNWANTED_FILES: '^(.*\/)*((.*\.(([ao])|(so)|(gcno)|(gcda)|(gcov)))|(^.*\~)|(.*\/tmp\/.+)|(#.*\#))$'
on:
  push:
  pull_request:
    types: [created]
    branches-ignore:
      - 'ga-ignore-*'

jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check unwanted files
        run: |
          echo "## Summary report : :chart_with_upwards_trend:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Jobs | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ---- | ------ |" >> $GITHUB_STEP_SUMMARY
          echo -n "| Check unwanted files | " >> $GITHUB_STEP_SUMMARY
          error=0
          for file in $(git ls-files); do
            if [[ $file =~ $UNWANTED_FILES ]]; then
              echo "::error title=Unwanted file detected::File $file is not allowed in the repository."
              error=1
            fi
          done
          if [ $error -eq 1 ]; then
            echo "Error :x: |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "Passed :white_check_mark: |" >> $GITHUB_STEP_SUMMARY

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create build directory
        run: |
          mkdir ./build/
      - name: Go to build directory
        run: |
          cd ./build/
      - name: Build project
        run: |
          cmake .
      - name: Compile project
        run: |
          make
      - name: Check if executable exists
        run: |
          { [ -f $EXECUTABLE ] && echo "Executable found :white_check_mark: |" >> $GITHUB_STEP_SUMMARY; } || { echo "Executable not found :x: |" >> $GITHUB_STEP_SUMMARY; echo "::error title=Executable not found::The executable $EXECUTABLE was not found in the repository." && exit 1; }

  run_units_tests:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create build directory
        run: |
          mkdir ./build/
      - name: Go to build directory
        run: |
          cd ./build/
      - name: Build project
        run: |
          cmake CMakeLists.txt
      - name: Compile unit tests
        run: |
          make tests_run
      - name: Run unit tests
        run: |
          { ./tests_run && echo "Unit tests passed :white_check_mark: |" >> $GITHUB_STEP_SUMMARY; } || { echo "Unit tests failed :x: |" >> $GITHUB_STEP_SUMMARY; echo "::error title=Unit tests failed::The unit tests failed." && exit 1; }

  run_functionals_tests:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name : Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: Atomot/ftest
      - name: Go to ftest directory
        run: |
          ls -la
      - name: install ftest
        run: |
          cargo build --release -p ftest
      - name: Create build directory
        run: |
          mkdir ./build/
      - name: Go to build directory
        run: |
          cd ./build/
      - name: Build project
        run: |
          echo "cmake CMakeLists.txt"
      - name: Compile functionals tests
        run: |
          echo "make functinals_tests_run"
      - name: Run functinals tests
        run: |
          { echo "./functinals_tests_run" && echo "Functionals tests passed :white_check_mark: |" >> $GITHUB_STEP_SUMMARY; } || { echo "Functionals tests failed :x: |" >> $GITHUB_STEP_SUMMARY; echo "::error title=Functionals tests failed::The functionals tests failed." && exit 1; }

  create_release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [check_program_compilation, run_units_tests, run_functionals_tests]
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create release
        run: |
          { echo "Creating release..." && echo "Release created :white_check_mark: |" >> $GITHUB_STEP_SUMMARY; } || { echo "Release creation failed :x: |" >> $GITHUB_STEP_SUMMARY; echo "::error title=Release creation failed::The release creation failed." && exit 1; }

  create_doxygen:
    runs-on: ubuntu-latest
    needs: [check_program_compilation, run_units_tests, run_functionals_tests]
    steps:
      - name : Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install doxygen
        run: |
          sudo apt-get install -y doxygen
      - name: Create doxygen
        run: |
          doxygen Doxyfile
      - name: Add doxygen to release
        run: |
          { echo "Doxygen created :white_check_mark: |" >> $GITHUB_STEP_SUMMARY; } || { echo "Doxygen creation failed :x: |" >> $GITHUB_STEP_SUMMARY; echo "::error title=Doxygen creation failed::The doxygen creation failed." && exit 1; }

  push_to_mirror:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [create_release, create_doxygen]
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.SSH_KEY }}
