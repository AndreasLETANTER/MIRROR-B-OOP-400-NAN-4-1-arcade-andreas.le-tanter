name: chocolatine
env:
  MIRROR_URL: git@github.com:EpitechPromo2026/B-OOP-400-NAN-4-1-arcade-andreas.le-tanter.git
  EXECUTABLE: "arcade"
  UNWANTED_FILES: '^(.*\/)*((.*\.(([ao])|(so)|(gcno)|(gcda)|(gcov)))|(^.*\~)|(.*\/tmp\/.+)|(#.*\#))$'
  SUMMARY: "test"

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
    branches-ignore:
      - 'ga-ignore-*'

jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    outputs:
      summary: ${{ steps.check_unwanted_files.outputs.summary }}
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: check_unwanted_files
        name: Check unwanted files
        run: |
          error=0
          for file in $(git ls-files); do
            if [[ $file =~ $UNWANTED_FILES ]]; then
              echo "::error title=Unwanted file detected::File $file is not allowed in the repository."
              error=1
            fi
          done
          if [ $error -eq 1 ]; then
            echo "summary=| Check unwanted files | :x: |" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "summary=| Check unwanted files | :white_check_mark: |" >> $GITHUB_OUTPUT

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    outputs:
      summary: ${{ steps.check_if_executable_exists.outputs.summary }}
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build project
        run: |
          cmake .
      - name: Compile project
        run: |
          make
      - id: check_if_executable_exists
        name: Check if executable exists
        run: |
          echo "summary=| Check if executable exists | :white_check_mark: |" >> $GITHUB_OUTPUT
          if [ -f $EXECUTABLE ]; then
            echo "lousdif"
          else
            echo "::error title=Executable not found::The executable $EXECUTABLE was not found."
            exit 1
          fi

  run_units_tests:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    outputs:
      summary: ${{ steps.check_if_unit_tests_exists.outputs.summary }}
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build project
        run: |
          cmake .
      - id: check_if_unit_tests_exists
        name: Compile and run unit tests
        run: |
          echo "summary=| Compile and run unit tests | :white_check_mark: |" >> $GITHUB_OUTPUT
          make tests_run
          if [ $? -eq 0 ]; then
            echo "louis"
          else
            echo "::error title=Unit tests failed::The unit tests failed."
            exit 1
          fi

  run_functionals_tests:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    outputs:
      summary: ${{ steps.run_functionals_tests.outputs.summary }}
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name : Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: Atomot/ftest
      - name: Go to ftest directory
        run: |
          ls -la
      - name: install ftest
        run: |
          cargo build --release -p ftest
      - name: Build project
        run: |
          echo "cmake CMakeLists.txt"
      - name: Compile functionals tests
        run: |
          echo "make functinals_tests_run"
      - id: run_functionals_tests
        name: Run functinals tests
        run: |
          echo "summary=| Run functinals tests | :white_check_mark: |" >> $GITHUB_OUTPUT
          if [ $? -eq 0 ]; then
            echo "dlou"
          else
            echo "::error title=Functionals tests failed::The functionals tests failed."
            exit 1
          fi

  create_release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [check_program_compilation, run_units_tests, run_functionals_tests]
    outputs:
      summary: ${{ steps.create_release.outputs.summary }}
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: create_release
        name: Create release
        run: |
          echo "summary=| Create release | :white_check_mark: |" >> $GITHUB_OUTPUT

  create_doxygen:
    runs-on: ubuntu-latest
    needs: [check_program_compilation, run_units_tests, run_functionals_tests]
    outputs:
      summary: ${{ steps.create_doxygen.outputs.summary }}
    steps:
      - name : Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install doxygen
        run: |
          sudo apt-get install -y doxygen
      - name: Create doxygen
        run: |
          doxygen Doxyfile
      - id: create_doxygen
        name: Add doxygen to release
        run: |
          echo "summary=| Create doxygen | :white_check_mark: |" >> $GITHUB_OUTPUT


  print_summary:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness, check_program_compilation, run_units_tests, run_functionals_tests, create_release, create_doxygen]
    env:
      SUMMARY_1: ${{ needs.check_repository_cleanliness.outputs.summary }}
      SUMMARY_2: ${{ needs.check_program_compilation.outputs.summary }}
      SUMMARY_3: ${{ needs.run_units_tests.outputs.summary }}
      SUMMARY_4: ${{ needs.run_functionals_tests.outputs.summary }}
      SUMMARY_5: ${{ needs.create_release.outputs.summary }}
      SUMMARY_6: ${{ needs.create_doxygen.outputs.summary }}
    steps:
      - name: Print summary
        run: |
          echo $SUMMARY_1 >> $GITHUB_STEP_SUMMARY
          echo $SUMMARY_2 >> $GITHUB_STEP_SUMMARY
          echo $SUMMARY_3 >> $GITHUB_STEP_SUMMARY
          echo $SUMMARY_4 >> $GITHUB_STEP_SUMMARY
          echo $SUMMARY_5 >> $GITHUB_STEP_SUMMARY
          echo $SUMMARY_6 >> $GITHUB_STEP_SUMMARY


  push_to_mirror:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [create_release, create_doxygen]
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.SSH_KEY }}
